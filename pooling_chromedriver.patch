Index: lib/wallaby.ex
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/wallaby.ex	(revision 77037cd829448be23896706141b79a2080ed548c)
+++ lib/wallaby.ex	(revision 37a4dc379a83b64540c8763e7205752b43bd811e)
@@ -36,7 +36,10 @@
     children = [
       supervisor(Wallaby.Driver.ProcessWorkspace.ServerSupervisor, []),
       supervisor(driver(), [[name: Wallaby.Driver.Supervisor]]),
-      :hackney_pool.child_spec(:wallaby_pool, timeout: 15_000, max_connections: 4),
+      :hackney_pool.child_spec(:wallaby_pool,
+        timeout: 15_000,
+        max_connections: System.schedulers_online()
+      ),
       worker(Wallaby.SessionStore, [])
     ]

Index: lib/wallaby/experimental/chrome.ex
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/wallaby/experimental/chrome.ex	(revision 77037cd829448be23896706141b79a2080ed548c)
+++ lib/wallaby/experimental/chrome.ex	(revision 14fb19d762ad243bfc2f35550c65fad0fa5c59eb)
@@ -110,7 +110,8 @@
   @chromedriver_version_regex ~r/^ChromeDriver (\d+)\.(\d+)/

   alias Wallaby.{DependencyError, Metadata}
-  alias Wallaby.Experimental.Chrome.{Chromedriver}
+  alias Wallaby.Experimental.Chrome.ServerPool
+  alias Wallaby.Experimental.Chrome.Chromedriver.Server
   alias Wallaby.Experimental.Selenium.WebdriverClient
   import Wallaby.Driver.LogChecker

@@ -145,7 +146,7 @@
   def init(:ok) do
     children = [
       Wallaby.Driver.LogStore,
-      Wallaby.Experimental.Chrome.Chromedriver
+      Wallaby.Experimental.Chrome.ServerPool
     ]

     Supervisor.init(children, strategy: :one_for_one)
@@ -213,9 +214,10 @@
   @doc false
   @spec start_session([start_session_opts]) :: Wallaby.Driver.on_start_session() | no_return
   def start_session(opts \\ []) do
-    opts |> Keyword.get(:readiness_timeout, @default_readiness_timeout) |> wait_until_ready!()
+    {:ok, server} = ServerPool.checkout()

-    base_url = Chromedriver.base_url()
+    Server.wait_until_ready(server)
+    base_url = Server.get_base_url(server)
     create_session_fn = Keyword.get(opts, :create_session_fn, &WebdriverClient.create_session/2)

     capabilities = Keyword.get(opts, :capabilities, capabilities_from_config(opts))
@@ -228,7 +230,7 @@
         url: base_url <> "session/#{id}",
         id: id,
         driver: __MODULE__,
-        server: Chromedriver,
+        server: server,
         capabilities: capabilities
       }

@@ -247,18 +249,12 @@
     |> put_binary_config()
   end

-  @spec wait_until_ready!(timeout) :: :ok | no_return
-  defp wait_until_ready!(timeout) do
-    case Chromedriver.wait_until_ready(timeout) do
-      :ok -> :ok
-      {:error, :timeout} -> raise "timeout waiting for chromedriver to be ready"
-    end
-  end
-
   @doc false
   def end_session(%Wallaby.Session{} = session, opts \\ []) do
     end_session_fn = Keyword.get(opts, :end_session_fn, &WebdriverClient.delete_session/1)
     end_session_fn.(session)
+
+    ServerPool.check_in(session.server)
     :ok
   end

Index: lib/wallaby/experimental/chrome/chromedriver/server.ex
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/wallaby/experimental/chrome/chromedriver/server.ex	(revision 77037cd829448be23896706141b79a2080ed548c)
+++ lib/wallaby/experimental/chrome/chromedriver/server.ex	(revision 14fb19d762ad243bfc2f35550c65fad0fa5c59eb)
@@ -54,11 +54,24 @@

   @impl true
   def init({chromedriver_path, opts}) do
-    startup_timeout = Keyword.get(opts, :startup_timeout, @default_startup_timeout)
-    Process.send_after(self(), :ensure_readiness, startup_timeout)
+    port_number = Utils.find_available_port()
+    base_url = build_base_url(port_number)
+
+    open_chromedriver_port(chromedriver_path, port_number)
+
+    check_readiness_async(port_number)

-    {:ok, %State{chromedriver_path: chromedriver_path}, {:continue, :start_chromedriver}}
+    {:ok, %State{chromedriver_path: chromedriver_path, port_number: port_number}}
   end
+
+
+#  @impl true
+#  def init({chromedriver_path, opts}) do
+#    startup_timeout = Keyword.get(opts, :startup_timeout, @default_startup_timeout)
+#    Process.send_after(self(), :ensure_readiness, startup_timeout)
+#
+#    {:ok, %State{chromedriver_path: chromedriver_path}, {:continue, :start_chromedriver}}
+#  end

   @impl true
   def handle_continue(:start_chromedriver, state) do
Index: lib/wallaby/experimental/chrome/server_pool.ex
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib/wallaby/experimental/chrome/server_pool.ex	(revision 37a4dc379a83b64540c8763e7205752b43bd811e)
+++ lib/wallaby/experimental/chrome/server_pool.ex	(revision 37a4dc379a83b64540c8763e7205752b43bd811e)
@@ -0,0 +1,59 @@
+defmodule Wallaby.Experimental.Chrome.ServerPool do
+  @moduledoc false
+
+  @instance __MODULE__
+
+  alias Wallaby.Experimental.Chrome
+
+  def child_spec(_arg) do
+    {:ok, chromedriver_path} = Chrome.find_chromedriver_executable()
+
+    @instance
+    |> :poolboy.child_spec(poolboy_config(), chromedriver_path)
+    |> from_deprecated_child_spec()
+  end
+
+  @spec checkout() :: {:ok, pid} | {:error, :full}
+  def checkout do
+    case :poolboy.checkout(@instance, true, :infinity) do
+      pid when is_pid(pid) ->
+        {:ok, pid}
+
+      :full ->
+        {:error, :full}
+    end
+  end
+
+  @spec check_in(pid) :: :ok
+  def check_in(server) do
+    :poolboy.checkin(@instance, server)
+  end
+
+  defp poolboy_config do
+    [
+      name: {:local, @instance},
+      worker_module: Wallaby.Experimental.Chrome.Chromedriver.Server,
+      size: pool_size(),
+      max_overflow: 0
+    ]
+  end
+
+  defp pool_size do
+    Application.get_env(:wallaby, :pool_size) || default_pool_size()
+  end
+
+  defp default_pool_size do
+    :erlang.system_info(:schedulers_online)
+  end
+
+  defp from_deprecated_child_spec({child_id, start_mfa, restart, shutdown, worker, modules}) do
+    %{
+      id: child_id,
+      start: start_mfa,
+      restart: restart,
+      shutdown: shutdown,
+      worker: worker,
+      modules: modules
+    }
+  end
+end
Index: lib/wallaby/experimental/chrome/chromedriver.ex
===================================================================
--- lib/wallaby/experimental/chrome/chromedriver.ex	(revision 77037cd829448be23896706141b79a2080ed548c)
+++ lib/wallaby/experimental/chrome/chromedriver.ex	(revision 77037cd829448be23896706141b79a2080ed548c)
@@ -1,23 +0,0 @@
-defmodule Wallaby.Experimental.Chrome.Chromedriver do
-  @moduledoc false
-
-  alias Wallaby.Experimental.Chrome
-  alias Wallaby.Experimental.Chrome.Chromedriver.Server
-
-  @instance __MODULE__
-
-  def child_spec(_arg) do
-    {:ok, chromedriver_path} = Chrome.find_chromedriver_executable()
-    Server.child_spec([chromedriver_path, [name: @instance]])
-  end
-
-  @spec wait_until_ready(timeout()) :: :ok | {:error, :timeout}
-  def wait_until_ready(timeout) do
-    Server.wait_until_ready(@instance, timeout)
-  end
-
-  @spec base_url :: String.t()
-  def base_url do
-    Server.get_base_url(@instance)
-  end
-end
